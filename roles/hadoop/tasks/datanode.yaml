- name: Set Hadoop hdfs-datanode version
  tags: package
  set_fact:
    hdfs_datanode_pkg: "{{ 'hadoop-hdfs-datanode-' + hdfs_datanode_version if hdfs_datanode_version else 'hadoop-hdfs-datanode' }}"
    yarn_nodemanager_pkg: "{{ 'hadoop-yarn-nodemanager-' + yarn_nodemanager_version if yarn_nodemanager_version else 'hadoop-yarn-nodemanager' }}"

- name: install datanode packages
  tags: package
  yum:  name={{ item }} state=present
  with_items:
    - "{{ hdfs_datanode_pkg }}"
    - "{{ yarn_nodemanager_pkg }}"
  notify:
    - restart datanode services
    - hdfs refresh nodes

- name: destroy data
  tags: init
  command: rm -rf {{ item }}
  with_items: "{{ dfs_datanode_data_dir.replace('file://','').split(',') }}"
  when: destroy_data

- name: create datanode directories
  file: dest={{ item }} owner=hdfs group=hdfs state=directory
  with_items: "{{ dfs_datanode_data_dir.replace('file://','').split(',') }}"

- name: create yarn local directories
  file: dest={{ item }} owner=yarn group=hadoop state=directory
  with_items: "{{ yarn_nodemanager_local_dirs.replace('file://','').split(',') }}"

- name: create yarn log directories
  file: dest={{ item }} owner=yarn group=hadoop state=directory
  with_items: "{{ yarn_nodemanager_log_dirs.replace('file://','').split(',') }}"

- name: install default configurations
  tags: config
  template: src=default/{{ item }}.j2 dest=/etc/default/{{ item }}
  with_items:
    - hadoop-hdfs-datanode
    - hadoop-yarn-nodemanager
  notify:
    - restart datanode services
    - hdfs refresh nodes

- meta: flush_handlers

- name: start datanode services
  tags: service
  service: name={{ item }} state=started enabled=yes
  with_items:
    - hadoop-hdfs-datanode
    - hadoop-yarn-nodemanager
  notify:
    - hdfs refresh nodes
