- name: Set Hadoop hdfs-namenode and hdfs-zkfc version
  tags: package
  set_fact:
    hdfs_namenode_pkg: "{{ 'hadoop-hdfs-namenode-' + hdfs_namenode_version if hdfs_namenode_version else 'hadoop-hdfs-namenode' }}"
    hdfs_zkfc_pkg: "{{ 'hadoop-hdfs-zkfc-' + hdfs_zkfc_version if hdfs_zkfc_version else 'hadoop-hdfs-zkfc' }}"

- name: install namenode package
  tags: package
  yum:  name={{ hdfs_namenode_pkg }} state=present

- name: install namenode default configurations
  template: src=default/{{ item }}.j2 dest=/etc/default/{{ item }}
  with_items:
    - hadoop-hdfs-namenode

- name: install zkfc package
  tags: package
  yum:  name={{ hdfs_zkfc_pkg }} state=present
  when:  groups['namenodes']|count > 1

- name: install zkfc default configurations
  tags: config
  template: src=default/{{ item }}.j2 dest=/etc/default/{{ item }}
  with_items:
    - hadoop-hdfs-zkfc
  when:  groups['namenodes']|count > 1

- name: initialize zookeeper
  tags: init
  command: hdfs zkfc -formatZK -force
  become: true
  become_user: hdfs
  when:  groups['namenodes']|count > 1
  run_once: true

- name: start zkfc
  tags: service
  service: name=hadoop-hdfs-zkfc state=restarted enabled=yes
  when:  groups['namenodes']|count > 1

- name: destroy data
  tags: init
  command: rm -rf {{ item }}
  with_items: "{{ dfs_namenode_name_dir.replace('file://','').split(',') }}"
  when: destroy_data

- name: create namenode directories
  tags: init
  file: dest={{ item }} owner=hdfs group=hdfs state=directory
  with_items: "{{ dfs_namenode_name_dir.replace('file://','').split(',') }}"

- name: format primary namenode
  tags: init
  command: hdfs namenode -format -force
  become: true
  become_user: hdfs
  when: ansible_fqdn == groups['namenodes'][0] and destroy_data

- name: start primary namenode
  tags: service
  service: name=hadoop-hdfs-namenode state=restarted enabled=yes
  when: ansible_fqdn == groups['namenodes'][0]

- name: init secondary instance
  tags: init
  command: hdfs namenode -bootstrapStandby
  become: true
  become_user: hdfs
  when: ansible_fqdn != groups['namenodes'][0] and destroy_data

- name: start secondary namenode
  tags: service
  service: name=hadoop-hdfs-namenode state=restarted enabled=yes
  when: ansible_fqdn != groups['namenodes'][0]
